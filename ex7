# img7_1

# пять функциях, представленных ниже, формируются на основе кружочков x[0], x[1] и т.д.
# по сути, нужно обратить внимание на две вещи
# 1. количество стрелочек. если их две – будет left, right; если их три – left, middle, right
# 2. подписи стрелочек. эти подписи записываются в условия if СВЕРХУ ВНИЗ

def zero(items, left, middle, right):
    if items[0] == 'D':
        return right
    if items[0] == 'GLYPH':
        return middle
    if items[0] == 'LFE':
        return left


def one(items, left, middle, right):
    if items[1] == 'JSON5':
        return right
    if items[1] == 'HYPHY':
        return middle
    if items[1] == 'TCSH':
        return left


def two(items, left, right):
    if items[2] == 'XC':
        return right
    if items[2] == 'MAKO':
        return left


def three(items, left, middle, right):
    if items[3] == 1981:
        return right
    if items[3] == 2011:
        return middle
    if items[3] == 1960:
        return left


def four(items, left, right):
    if items[4] == "VALA":
        return right
    if items[4] == "GENIE":
        return left


# в main реализуем дерево. просто заполняем его слева вправо, каждый узел дерева
# для заполнения внутренности функции нужно указывать СНИЗУ ВВЕРХ
def main(items):
    result = three(
        items,
        zero(
            items, 9, 8, four(
                items, 7, 6
            )
        ),
        5,
        one(
            items, 4, 3, four(
                items, 2, two(
                    items, 1, 0
                )
            )
        )
    )
    return result



# img7_2

# в данном примере входной массив больше, чем дерево (в массиве есть строки, которых нет в дереве)
# в подобных случаях просто забиваем и реализуем как в примере выше. то есть опираемся чисто на дерево


def one(items, left, middle, right):
    if items[1] == 2011:
        return right
    if items[1] == 2009:
        return middle
    if items[1] == 2012:
        return left


def two(items, left, middle, right):
    if items[2] == 'NCL':
        return right
    if items[2] == 'OPA':
        return middle
    if items[2] == 'RAML':
        return left


def three(items, left, middle, right):
    if items[3] == 1959:
        return right
    if items[3] == 1973:
        return middle
    if items[3] == 2008:
        return left


def main(items):
    result = one(
        items,
        12,
        two(
            items, 11, three(
                items, 10, 9, 8
            ), 7
        ),
        three(
            items, two(
                items, 6, 5, 4
            ), 3, two(
                items, 2, 1, 0
            )
        )
    )
    return result
